{
  "name": "passport.socketio",
  "version": "1.2.0",
  "description": "access passport.js authenticated user information from socket.io",
  "main": "lib/index.js",
  "keywords": [
    "socket",
    "socket.io",
    "passport"
  ],
  "author": {
    "name": "José F. Romaniello",
    "email": "jfromaniello@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jfromaniello/passport.socketio.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "license": "MIT",
  "dependencies": {
    "passport": "~0.1.16",
    "request": "~2.19.0",
    "xtend": "~2.0.3"
  },
  "devDependencies": {
    "should": "~1.2.2",
    "mocha": "~1.9.0",
    "express": "~3.1.2",
    "socket.io": "~0.9.14",
    "passport-local": "~0.1.6",
    "xmlhttprequest": "~1.5.0",
    "socket.io-client": "git+https://github.com/jfromaniello/socket.io-client.git",
    "connect": "~2.7.11"
  },
  "readme": "Access [Passport.js](http://passportjs.org) user information from [socket.io](http://socket.io) connection.\n\n\nInstallation\n============\n\n```\nnpm install passport.socketio\n```\n\nUsage \n=====\n\n\n```javascript\n\n  //configure passport and express\n\n  var socketIo = require(\"socket.io\"),\n    passportSocketIo = require(\"passport.socketio\");\n\n  var sio = socketIo.listen(webServer);\n\n\n  //except for the optional fail and success the parameter object has the \n  //same attribute than the session middleware http://www.senchalabs.org/connect/middleware-session.html\n\n  sio.set(\"authorization\", passportSocketIo.authorize({\n    cookieParser: express.cookieParser, //or connect.cookieParser\n    key:          'express.sid',        //the cookie where express (or connect) stores its session id.\n    secret:       'my session secret',  //the session secret to parse the cookie\n    store:         mySessionStore,      //the session store that express uses\n    fail: function(data, accept) {      // *optional* callbacks on success or fail\n      accept(null, false);              // second param takes boolean on whether or not to allow handshake\n    },\n    success: function(data, accept) {\n      accept(null, true);\n    }\n  }));\n\n  sio.sockets.on(\"connection\", function(socket){\n    console.log(\"user connected: \", socket.handshake.user.name);\n    \n    //filter sockets by user...\n    var userGender = socket.handshake.user.gender, \n        opposite = userGender === \"male\" ? \"female\" : \"male\";\n\n    passportSocketIo.filterSocketsByUser(sio, function (user) {\n      return user.gender === opposite;\n    }).forEach(function(s){\n      s.send(\"a \" + userGender + \" has arrived!\");\n    });\n\n  });\n\n```\n\nDevelop\n=======\n\n  npm install\n  npm test\n\n\nLicense\n========\n\nMIT - José F. Romaniello 2012.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jfromaniello/passport.socketio/issues"
  },
  "_id": "passport.socketio@1.2.0",
  "dist": {
    "shasum": "30c2e078e1ba7d8a033bbc8f79ad4389ae65396d"
  },
  "_from": "passport.socketio@",
  "_resolved": "https://registry.npmjs.org/passport.socketio/-/passport.socketio-1.2.0.tgz"
}
